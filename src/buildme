#!/usr/bin/python

from distutils.core import setup
from distutils.extension import Extension
from Cython.Distutils import build_ext
import sys

#sys.path.append("/home/raf/rads/Cython-0.13/bin")

from fabricate import *

cppsources = ['tree', 'box', 'treedata', 'boxset']

cydeps = {
	'box': [],
	'tree': ['box','treedata']
	'point': []
	}


flags = {
	'cpp': ['-pg','-I/home/raf/projects/rads/Profil-2.0.8/include/'],
	'cython': ['-I/usr/local/lib/python2.6/dist-packages/Cython/Includes/libcpp/',
			   '-I/home/raf/projects/rads/Profil-2.0.8/include/', '-pthread',
			   '-fPIC', '-DNDEBUG', '-g', '-fwrapv', '-O2',# '-Wall',
			   '-fno-strict-aliasing', '-I/usr/include/python2.6']
}
link_flags = {
	'cpp': ['-L/home/raf/projects/rads/Profil-2.0.8/lib/', '-lProfil', '-llr', '-lBias'],
	'cython': ['-L/home/raf/projects/rads/Profil-2.0.8/lib/', '-lProfil', '-llr', '-lBias']
}
programs = link_flags.keys()

def build():
	compile()
	cython()
	link()

def compile():
	for source in sources:
		run('g++', '-c', flags['sources'], source+'.cpp')
	for prog in programs:
		run('g++', '-c', flags[prog], prog+'.cpp')

def cython():
	for cppfile in cydeps.keys():
		cyfile = 'cy'+cppfile
		cppobj = 'cpp'+cppfile
		run('cython', '--cplus', cyfile+'.pyx')
		run('g++', '-c', flags['cython'], cppfile+'.cpp', '-o', cppobj+'.o')
		run('g++', '-c', flags['cython'], cyfile+'.cpp', '-o', cyfile+'.o')
		run('g++', '-shared', flags['cython'], [s+'.o' for s in [cppobj,cyfile]+deps[cppfile]], link_flags['mapper'], '-o', cyfile+'.so')

def link():
	for prog in programs:
		objects = [s+'.o' for s in sources+[prog]]
		run('g++', flags[prog], objects, link_flags[prog], '-o', prog)

def clean():
	autoclean()

main()

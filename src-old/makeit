#!/usr/bin/python

from fabricate import *
import sys, os, stat, commands

cython_path = 'cython'
sage_cython_include = '/usr/local/share/sage-4.2-linux-ubuntu9.10-i686-Linux/devel/sage-main/'
sage_c_include = '/usr/local/share/sage-4.2-linux-ubuntu9.10-i686-Linux/devel/sage-main/c_lib/include/'

comp1 = """gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv
-O2 -Wall -fPIC
-I/home/raf/projects/rads/Profil-2.0.8/include/
-I/usr/local/lib/python2.7/dist-packages/numpy/core/include/
-I/usr/local/lib/python2.7/dist-packages/Cython/Includes/libc/
-I/usr/local/lib/python2.7/dist-packages/Cython/Includes/libcpp/
-I/home/raf/projects/rads/src-old/rads/maps/
-I/home/raf/projects/rads/src-old/rads/ -I/home/raf/projects/rads/src-old/cpp/
-I. -I/usr/include/python2.7
-I/usr/local/share/sage-4.2-linux-ubuntu9.10-i686-Linux/devel/sage-main/c_lib/include/
-c""".split()
comp2 = ["-o"]
comp3 = "-O3 -w".split()

link1 = "g++ -pthread -shared -Wl,-O1 -Wl,-Bsymbolic-functions".split()
link2 = "-lProfil -llr -lBias -o".split()
link3 = "-g -L/home/raf/projects/rads/Profil-2.0.8/lib/".split()

clink1 = "g++"
clink2 = "-lProfil -llr -lBias -o".split()
clink3 = "-g -L/home/raf/projects/rads/Profil-2.0.8/lib/".split()

def compile_cpp(inputs,output):
	run(comp1,inputs,comp2,output,comp3)

def compile_cython(inputs,output):
	run(cython_path, '-I'+sage_cython_include,
		'-a', '--cplus', inputs, '-o', output)

def link(inputs,output):
	run(link1,inputs,link2,output,link3)

def link_cpp(inputs,output):
	run(clink1,inputs,clink2,output,clink3)

cydeps = {
	'graphs': [],
	'cyboxset': ['box','boxset'],
	'cytree': ['tree','box','boxset','treedata'],
	'cyutils': ['box'],
	'cymapper': ['mapper','box','boxset'],
	'cycombenc': ['tree','treedata','mapper','box','boxset'],
	'treetest': ['tree','treedata','box','boxset'],
	'debugtree': ['tree','treedata','box','boxset'],
	}

cpp_progs = ['treetest','debugtree']
cpp_dir = 'cpp/'

def cpp_deps(path):
	parts = path.split('/')
	name = parts[-1]
	if name in cydeps:
		return [cpp_dir+s for s in cydeps[name]]
	return [path+'_cpp']


# scan the source directory for extension files, converting
# them to extension names in dotted notation
def scandir(dir, files=[]):
    for file in os.listdir(dir):
        path = os.path.join(dir, file)
        if os.path.isfile(path) and path.endswith(".pyx"):
            files.append(path.replace(os.path.sep, ".")[:-4])
        elif os.path.isdir(path):
            scandir(path, files)
    return files


tmp_dir = 'build/temp.linux-i686-2.7/'
lib_dir = 'build/lib.linux-i686-2.7/'

def build_deps(f):
	deps = cpp_deps(f)
	for cpp in deps:
		run(['mkdir',tmp_dir+cpp])
		compile_cpp(cpp+'.cpp',tmp_dir+cpp+'.o')
	return deps


def build_cyfile(extName):
	cy = extName.replace('.', os.path.sep)

	compile_cython(cy+'.pyx', cy+'.cpp')
	compile_cpp(cy+'.cpp', tmp_dir+cy+'.o')

	deps = build_deps(cy)

	link([tmp_dir+s+'.o' for s in [cy]+deps],lib_dir+cy+'.so')

def build_cpp(name):
	compile_cpp(cpp_dir+name+'.cpp', tmp_dir+name+'.o')
	deps = build_deps(name)
	link_cpp([tmp_dir+s+'.o' for s in [name]+deps],lib_dir+name)


def build():
	run('python buildpy.py build'.split())
	files = scandir("rads")
	for name in files:
		build_cyfile(name)
	for name in cpp_progs:
		build_cpp(name)

def makedirs():
	run(['mkdir',tmp_dir,tmp_dir+'cpp/',tmp_dir+'rads/',tmp_dir+'rads/maps/'])

def test():
	os.chdir(lib_dir)
	run('ipython', '-pylab', 'rads/test_tree.py')
	
def clean():
	autoclean()

main()

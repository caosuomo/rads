Running and experimenting with test_tent.py

Building the tent map code:
---------------------------

1. Copy rads folder to rads.bak.
2. Download the zip folder of the latest version of RADS from here: https://github.com/caosuomo/rads
3. unzip it and rename it 'rads'.
4. Copy your config_* and makeit_* files from rads.bak into the new rads folder. 
5. cd (change directory) into the rads folder (you have be in the terminal for this).
6. type ./makeit_* and cross your fingers. :) 
7. Assuming it build without any errors, cd build/lib.
8. Copy the rads directory to where Canopy can see it: cp rads /Users/<username>/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages, where <username> == your username. Note, there shouldn't be a "/" after rads. 
9. From the rads root directory, you can find the test_tent.py file in src/rads/test.


Procedure for running test_tent.py:
-----------------------------------

1. From the command line in Canopy, type 'run test_tent.py', or open
'test_tent.py' and click the green arrow. A few messages will print --
eg., the subdivision depth and the size of the invariant set as the
resolution is increased (up to the <depth> variable, first line below imports).

2. Next, a plot of the graph of the outer enclosure will pop up. 

   -- Note, the indexing is 0-based, so if you divide [0,1] into
      subintervals, these will correspond to nodes {0,1,2,3}.

3. You can explore the tree using 'ce.tree.boxes'. Make sure its
structure makes sense. The outer approximation (called a Multivalued
Map, or MVM) is stored in ce.mvm. By pressing <tab> in the terminal
after 'ce.mvm.' will get you a list of attributes. This works for any
Python object (super handy!).

4. Of special note(!): I'm not sure the MVM is right. I need to ask
Raf (the author of this part of the code) about this. Claire, you're
the expert. Test it out using a depth of 1,2, or 3.

    -- Self-loops won't plot (yet). But you'll see them printed to the
       screen, so as we're testing hypotheses we can use this to
       confirm.

    -- ce.mvm.graph is a normal NetworkX DiGraph object so you can use
       anything in NetworkX on it. (The MVM is just a "wrapper" around
       it.)
